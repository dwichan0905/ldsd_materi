;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 30/06/2019
;Author  : Harjuna
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;char tampung[16];
;int ms1,ms2,s1,s2,m1,m2;
;int p,r;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0025 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0026 // Place your code here
; 0000 0027     p = p + 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0028     r = 0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0029 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 002D {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002E // Place your code here
; 0000 002F     r = 1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0030 }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0035 {
;PCODE: $0000001E VOL: 0
; 0000 0036 // Declare your local variables here
; 0000 0037 
; 0000 0038 // Input/Output Ports initialization
; 0000 0039 // Port A initialization
; 0000 003A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003C PORTA=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003D DDRA=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003E 
; 0000 003F // Port B initialization
; 0000 0040 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0041 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0042 PORTB=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0043 DDRB=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0044 
; 0000 0045 // Port C initialization
; 0000 0046 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0047 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0048 PORTC=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0049 DDRC=0xFF;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 004A 
; 0000 004B // Port D initialization
; 0000 004C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004E PORTD=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004F DDRD=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0050 
; 0000 0051 // Timer/Counter 0 initialization
; 0000 0052 // Clock source: System Clock
; 0000 0053 // Clock value: Timer 0 Stopped
; 0000 0054 // Mode: Normal top=0xFF
; 0000 0055 // OC0 output: Disconnected
; 0000 0056 TCCR0=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0057 TCNT0=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0058 OCR0=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0059 
; 0000 005A // Timer/Counter 1 initialization
; 0000 005B // Clock source: System Clock
; 0000 005C // Clock value: Timer1 Stopped
; 0000 005D // Mode: Normal top=0xFFFF
; 0000 005E // OC1A output: Discon.
; 0000 005F // OC1B output: Discon.
; 0000 0060 // Noise Canceler: Off
; 0000 0061 // Input Capture on Falling Edge
; 0000 0062 // Timer1 Overflow Interrupt: Off
; 0000 0063 // Input Capture Interrupt: Off
; 0000 0064 // Compare A Match Interrupt: Off
; 0000 0065 // Compare B Match Interrupt: Off
; 0000 0066 TCCR1A=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0067 TCCR1B=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0068 TCNT1H=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0069 TCNT1L=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 006A ICR1H=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 006B ICR1L=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006C OCR1AH=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006D OCR1AL=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 006E OCR1BH=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 006F OCR1BL=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0070 
; 0000 0071 // Timer/Counter 2 initialization
; 0000 0072 // Clock source: System Clock
; 0000 0073 // Clock value: Timer2 Stopped
; 0000 0074 // Mode: Normal top=0xFF
; 0000 0075 // OC2 output: Disconnected
; 0000 0076 ASSR=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0077 TCCR2=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0078 TCNT2=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0079 OCR2=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007A 
; 0000 007B // External Interrupt(s) initialization
; 0000 007C // INT0: On
; 0000 007D // INT0 Mode: Falling Edge
; 0000 007E // INT1: On
; 0000 007F // INT1 Mode: Falling Edge
; 0000 0080 // INT2: Off
; 0000 0081 GICR|=0xC0;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0082 MCUCR=0x0A;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0083 MCUCSR=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0084 GIFR=0xC0;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0085 
; 0000 0086 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0087 TIMSK=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0088 
; 0000 0089 // USART initialization
; 0000 008A // USART disabled
; 0000 008B UCSRB=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 008C 
; 0000 008D // Analog Comparator initialization
; 0000 008E // Analog Comparator: Off
; 0000 008F // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0090 ACSR=0x80;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0091 SFIOR=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0092 
; 0000 0093 // ADC initialization
; 0000 0094 // ADC disabled
; 0000 0095 ADCSRA=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0096 
; 0000 0097 // SPI initialization
; 0000 0098 // SPI disabled
; 0000 0099 SPCR=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 009A 
; 0000 009B // TWI initialization
; 0000 009C // TWI disabled
; 0000 009D TWCR=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 009E 
; 0000 009F // Alphanumeric LCD initialization
; 0000 00A0 // Connections are specified in the
; 0000 00A1 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00A2 // RS - PORTC Bit 0
; 0000 00A3 // RD - PORTC Bit 1
; 0000 00A4 // EN - PORTC Bit 2
; 0000 00A5 // D4 - PORTC Bit 4
; 0000 00A6 // D5 - PORTC Bit 5
; 0000 00A7 // D6 - PORTC Bit 6
; 0000 00A8 // D7 - PORTC Bit 7
; 0000 00A9 // Characters/line: 8
; 0000 00AA lcd_init(8);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00AB 
; 0000 00AC // Global enable interrupts
; 0000 00AD #asm("sei")
;PCODE: $0000006A VOL: 0
	sei
;PCODE: $0000006B VOL: 0
; 0000 00AE 
; 0000 00AF while (1)
;PCODE: $0000006C VOL: 0
; 0000 00B0       {
; 0000 00B1       // Place your code here
; 0000 00B2         delay_ms(100);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00B3        if (r == 0)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00B4        {
; 0000 00B5         if (p == 0)
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00B6         {
; 0000 00B7         ms1 = ms1;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00B8         }
; 0000 00B9         else if (p == 1)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00BA         {
; 0000 00BB         ms1 = ms1 + 1;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00BC         }
; 0000 00BD         else if (p == 2)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00BE         {
; 0000 00BF          p = 0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00C0         }
; 0000 00C1         }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00C2        else if (r == 1)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00C3        {
; 0000 00C4         ms1 = 0; ms2 = 0; s1 = 0; s2 = 0; m1 = 0; m2 = 0;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00C5        }
; 0000 00C6         if (ms1 == 10)
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00C7        {
; 0000 00C8             ms1 = 0;
;PCODE: $0000009B VOL: 0
; 0000 00C9             ms2 = ms2 + 1;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00CA        }
; 0000 00CB        if (ms2 == 6)
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00CC        {
; 0000 00CD             ms2 = 0;
;PCODE: $000000A3 VOL: 0
; 0000 00CE             s1 = s1 + 1;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00CF        }
; 0000 00D0        if (s1 == 10)
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00D1        {
; 0000 00D2             s1 = 0;
;PCODE: $000000AB VOL: 0
; 0000 00D3             s2 = s2 + 1;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00D4        }
; 0000 00D5        if (s2 == 6)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00D6        {
; 0000 00D7             s2 = 0;
;PCODE: $000000B3 VOL: 0
; 0000 00D8             m1 = m1 + 1;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00D9        }
; 0000 00DA        if (m1 == 10)
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00DB        {
; 0000 00DC             m1 = 0;
;PCODE: $000000BB VOL: 0
; 0000 00DD             m2 = m2 + 1;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00DE        }
; 0000 00DF 
; 0000 00E0        lcd_gotoxy(0,0);  //menampilkan data di kolom 0 baris ke-0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00E1        lcd_puts("Timer");
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E2        sprintf(tampung,"%i%i:%i%i:%i%i",m2,m1,s2,s1,ms2,ms1 );  // simpan data integer ke array tampung[16]
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00E3        lcd_gotoxy(0,1);         //menampilkan data di kolom 0 baris ke-2
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00E4        lcd_puts(tampung);      //menampilkan array tampung bertype char
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00E5       }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00E6 }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0

	.DSEG
_0x13:
	.BYTE 0x6
